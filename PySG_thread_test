#!/usr/bin/python3
import threading
import time
import itertools
import logging
import io
import PySimpleGUI as sg
import queue
import matplotlib.pyplot as plt
import numpy as np
"""
    DESIGN PATTERN - Multithreaded GUI
    One method for running multiple threads in a PySimpleGUI environment.
    The PySimpleGUI code, and thus the underlying GUI framework, runs as the primary, main thread
    Other parts of the software are implemented as threads
    
    While users never know the implementation details within PySimpleGUI, the mechanism is that a queue.Queue
    is used to communicate data between a thread and a PySimpleGUI window.
    The PySimpleGUI code is structured just like a typical PySimpleGUI program.  A layout defined,
        a Window is created, and an event loop is executed.

    Copyright 2020 PySimpleGUI.org
    
"""

logger = logging.getLogger('mymain')

class QueueHandler(logging.Handler):
    def __init__(self, log_queue):
        super().__init__()
        self.log_queue = log_queue

    def emit(self, record):
        self.log_queue.put(record)

# ######## ##     ## ########  ########    ###    ########
#    ##    ##     ## ##     ## ##         ## ##   ##     ##
#    ##    ##     ## ##     ## ##        ##   ##  ##     ##
#    ##    ######### ########  ######   ##     ## ##     ##
#    ##    ##     ## ##   ##   ##       ######### ##     ##
#    ##    ##     ## ##    ##  ##       ##     ## ##     ##
#    ##    ##     ## ##     ## ######## ##     ## ########

def worker_thread1(thread_name, run_freq,  window):
    """
    A worker thread that communicates with the GUI
    These threads can call functions that block without affecting the GUI (a good thing)
    Note that this function is the code started as each thread. All threads are identical in this way
    :param thread_name: Text name used  for displaying info
    :param run_freq: How often the thread should run in milliseconds
    :param window: window this thread will be conversing with
    :type window: sg.Window
    :return:
    """
    print('Starting thread 1 - {} that runs every {} ms'.format(thread_name, run_freq))
    for i in itertools.count():                             # loop forever, keeping count in i as it loops
        time.sleep(run_freq/1000)                           # sleep for a while
        # put a message into queue for GUI
        logger.info(thread_name + f'count = {i}')
        window.write_event_value(thread_name, f'count = {i}')


def worker_thread2(thread_name, run_freq,  window):
    """
    A worker thread that communicates with the GUI
    These threads can call functions that block without affecting the GUI (a good thing)
    Note that this function is the code started as each thread. All threads are identical in this way
    :param thread_name: Text name used  for displaying info
    :param run_freq: How often the thread should run in milliseconds
    :param window: window this thread will be conversing with
    :type window: sg.Window
    :return:
    """
    print('Starting thread 2 - {} that runs every {} ms'.format(thread_name, run_freq))
    for i in itertools.count():                             # loop forever, keeping count in i as it loops
        time.sleep(run_freq/1000)
        logger.info(thread_name + f'count = {i}')                           # sleep for a while
        # put a message into queue for GUI
        window.write_event_value(thread_name, f'count = {i}')


def worker_thread3(thread_name, run_freq,  window: sg.Window, data):
    """
    A worker thread that communicates with the GUI
    These threads can call functions that block without affecting the GUI (a good thing)
    Note that this function is the code started as each thread. All threads are identical in this way
    :param thread_name: Text name used  for displaying info
    :param run_freq: How often the thread should run in milliseconds
    :param window: window this thread will be conversing with
    :type window: sg.Window
    :return:
    """
    print('Starting thread 3 - {} that runs every {} ms'.format(thread_name, run_freq))
    for i in itertools.count():                             # loop forever, keeping count in i as it loops
        time.sleep(run_freq/1000) 
        logger.info(thread_name + f'count = {i}')                          # sleep for a while
        # put a message into queue for GUI
        window.write_event_value(thread_name, f'count = {i}')
        """
        The thread that communicates with the application through the window's events.

        Because the figure creation time is greater than the GUI drawing time, it's safe
        to send a non-regulated stream of events without fear of overrunning the communication queue
        """
        fig = your_matplotlib_code(data)
        buf = draw_figure(fig)
        window.write_event_value("-THREAD-", buf)  # Data sent is a tuple of thread name and counter


def your_matplotlib_code(data):
    # Fixing random state for reproducibility
    #np.random.seed(19680801)

    #map_img = np.zeros((1024, 1024))
    # make data
    #X, Y = np.meshgrid(np.linspace(-3, 3, 256), np.linspace(-3, 3, 256))
    Z = data
    fig, ax1 = plt.subplots()
    ax1.imshow(Z, cmap='bone', interpolation='none', aspect='equal', origin='lower')
    #Pxx, freqs, bins, im = ax2.specgram(x, NFFT=NFFT, Fs=Fs, noverlap=900)

    return fig


def draw_figure(figure):
    """
    Draws the previously created "figure" in the supplied Image Element

    :param element: an Image Element
    :param figure: a Matplotlib figure
    :return: The figure canvas
    """
    plt.close('all')  # erases previously drawn plots
    canv = FigureCanvasAgg(figure)
    buf = io.BytesIO()
    canv.print_figure(buf, format='png')
    if buf is not None:
        buf.seek(0)
        #element.update(data=buf.read())
        return buf
    else:
        return None

#  ######   ##     ## ####
# ##    ##  ##     ##  ##
# ##        ##     ##  ##
# ##   #### ##     ##  ##
# ##    ##  ##     ##  ##
# ##    ##  ##     ##  ##
#  ######    #######  ####


def the_gui():
    """
    Starts and executes the GUI
    Reads data from a Queue and displays the data to the window
    Returns when the user exits / closes the window
        (that means it does NOT return until the user exits the window)
    :param gui_queue: Queue the GUI should read from
    :return:
    """
    
    BORDER_COLOR = "#111122"
    DARK_HEADER_COLOR = "#111133"
    BPAD_TOP = ((20, 20), (20, 10))
    BPAD_LEFT = ((20, 10), (0, 0))
    BPAD_LEFT_INSIDE = (0, (5, 0))
    BPAD_RIGHT = ((10, 20), (10, 0))
    NAME_SIZE = 23

    block_2 = [ [sg.Text("Image", font="Any 20")],
                [sg.pin(sg.Image(key="-IMAGE-"))]]

    block_1 = [ [sg.Text('Multithreaded Window Example')],
                [sg.Text('', size=(15, 1), key="-OUTPUT-")],
                [sg.Multiline(size=(40, 26), key="-LOG-", autoscroll=True)]
             ]
    
    block_3 = [[sg.Button("Start", key="-START-")], [sg.Button("Exit")]]
    
    layout = [
        [ [ sg.Frame(
                "",
                block_1,
                size=(320, 400),
                pad=BPAD_LEFT_INSIDE,
                border_width=1,
                expand_x=True,
                expand_y=True ) ], ],
                
            [sg.Column(
                block_2,
                size=(320, 160),
                #pad=BPAD_RIGHT,
                expand_x=True,
                expand_y=True,
                grab=True) ],
         [[ sg.Frame(
                "",
                block_3,
                size=(320, 60),
                #pad=BPAD_LEFT_INSIDE,
                border_width=1,
                expand_x=True,
                expand_y=True )]]       
        ]
    

    window = sg.Window('Multithreaded Window', layout, finalize=True)

    # Setup logging and start app
    logging.basicConfig(level=logging.DEBUG)
    log_queue = queue.Queue()
    queue_handler = QueueHandler(log_queue)
    logger.addHandler(queue_handler)

    image_data = np.zeros((1024, 1024))

    # -- Create a Queue to communicate with GUI --
    # queue used to communicate between the gui and the threads
    # -- Start worker threads, each taking a different amount of time

    # -- Start the GUI passing in the Queue --

    sg.cprint_set_output_destination(window, "-LOG-")

    colors = {'Thread 1':('white', 'red'), 'Thread 2':('white', 'purple'), 'Thread 3':('white', 'blue'), 'Log':('white', 'green')}
    # --------------------- EVENT LOOP ---------------------
    threads_running = False
    while True:
        # wait for up to 100 ms for a GUI event
        event, values = window.read()
        if event in (sg.WIN_CLOSED, 'Exit'):
            break
        elif event == "-THREAD-":
            plt.close('all')  # close all plots... unclear if this is required
            window["-IMAGE-"].update(data=values[event].read())
        elif event == "-START-":
            if not threads_running:
                threads_running = True
                threading.Thread(target=worker_thread1, args=('Thread 1', 500, window,),  daemon=True).start()
                threading.Thread(target=worker_thread2, args=('Thread 2', 200, window,),  daemon=True).start()
                threading.Thread(target=worker_thread3, args=('Thread 3', 1000, window,image_data), daemon=True).start()
                window["-START-"].update("Stop")
            else:
                threads_running = False
                #threading.Thread(target=worker_thread1, args=('Thread 1', 500, window,),  daemon=True).
                #threading.Thread(target=worker_thread2, args=('Thread 2', 200, window,),  daemon=True).start()
                #threading.Thread(target=worker_thread3, args=('Thread 3', 1000, window,), daemon=True).start()
                window["-START-"].update("Start")
        else:
            # --------------- Loop through all messages coming in from threads ---------------
            sg.cprint(event, values[event], c=colors[event])
        
        # Poll queue
        try:
            record = log_queue.get(block=False)
        except queue.Empty:
            pass
        else:
            msg = queue_handler.format(record)
            window.write_event_value("Log", msg)
        
    # if user exits the window, then close the window and exit the GUI func
    window.close()


##     ##    ###    #### ##    ##
###   ###   ## ##    ##  ###   ##
#### ####  ##   ##   ##  ####  ##
## ### ## ##     ##  ##  ## ## ##
##     ## #########  ##  ##  ####
##     ## ##     ##  ##  ##   ###
##     ## ##     ## #### ##    ##

if __name__ == '__main__':
    the_gui()

